

# para abrir os servicoes pegas no ip e porta do store front do projeto dado pela prof e usas este comando 
#para ver a porta fazes-- kubectl get service

#kubectl delete -f aks-store-demo\aks-store-all-in-one.yaml
#kubectl apply -f aks-store-demo\aks-store-all-in-one.yaml

# kubectl port-forward -n argocd svc/argocd-server 8080:443

name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout do código fonte
    - name: Checkout code
      uses: actions/checkout@v2

    # Configura o Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Logar no DockerHub (DockerHub credentials devem ser configuradas nos Secrets do GitHub)
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Construir a imagem Docker e tagueá-la
    - name: Build and Tag Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/ask-store-demo:latest -f src/store-front/Dockerfile src/store-front
       

        
  #fazer para outros serviços
    
    # Empurrar a imagem para o DockerHub
    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/ask-store-demo:latest
  # teste 29

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
        
  #     - name: Set up Kubeconfig
  #       run: |
  #         mkdir -p $HOME/.kube
  #         echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

        
  #     - name: Login to Argo CD
  #       run: argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
        
  #     - name: Sync the application
  #       run: argocd app sync aks-store  # Update this
  